name: CI/CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 1.2.3)'
        required: true
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  pull-requests: read

jobs:
  # Semantish release!
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    outputs:
      should-release: ${{ steps.version.outputs.should-release }}
      new-version: ${{ steps.version.outputs.new-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate Version from Commit Message
        id: version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Manual release via workflow_dispatch: use input version and skip auto-calculation
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            echo "Manual release requested: version ${{ github.event.inputs.version }}"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "new-version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "Updating Cargo.toml to version ${{ github.event.inputs.version }}"
            sed -i "s/version = \"0.0.0-dev\"/version = \"${{ github.event.inputs.version }}\"/" Cargo.toml
            mkdir -p release-artifacts
            cp Cargo.toml release-artifacts/
            exit 0
          fi
          # Use commit message (which is PR title for squash merges)
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          # Extract just the title part (before any PR number)
          # e.g. "feat: add dark mode (#123)" -> "feat: add dark mode"
          PR_TITLE=$(echo "$COMMIT_MSG" | sed 's/ (#[0-9]\+)$//')
          
          echo "Using title for versioning: $PR_TITLE"
          
          # Get latest release version
          LATEST=$(gh release list --limit 1 --json tagName -q '.[0].tagName' 2>/dev/null || echo "")
          if [ -z "$LATEST" ]; then
            CURRENT_VERSION="0.0.0"
          else
            CURRENT_VERSION=${LATEST#v}  # Remove 'v' prefix
          fi
          
          echo "Current version: $CURRENT_VERSION"
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Determine bump type from PR title
          SHOULD_RELEASE=false
          NEW_VERSION="$CURRENT_VERSION"
          
          case "$PR_TITLE" in
            feat!:*|fix!:*|*"BREAKING CHANGE"*)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              SHOULD_RELEASE=true
              echo "Breaking change detected → major bump"
              ;;
            feat:*)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"  
              SHOULD_RELEASE=true
              echo "Feature detected → minor bump"
              ;;
            fix:*)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              SHOULD_RELEASE=true
              echo "Fix detected → patch bump"
              ;;
            *)
              echo "No release needed (chore, docs, etc.)"
              ;;
          esac
          
          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Result: $CURRENT_VERSION → $NEW_VERSION (release: $SHOULD_RELEASE)"
          
          # Update Cargo.toml with new version if releasing
          if [ "$SHOULD_RELEASE" = "true" ]; then
            echo "Updating Cargo.toml to version $NEW_VERSION"
            sed -i "s/version = \"0.0.0-dev\"/version = \"$NEW_VERSION\"/" Cargo.toml
          
            # Upload the updated Cargo.toml as artifact
            mkdir -p release-artifacts
            cp Cargo.toml release-artifacts/
          fi

      - name: Upload versioned Cargo.toml
        if: steps.version.outputs.should-release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cargo-toml-versioned
          path: release-artifacts/Cargo.toml
          retention-days: 1

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check code compiles
        run: cargo check --all-targets

      - name: Run clippy
        run: cargo clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test

  basic-functionality:
    name: Basic Functionality Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build binary
        run: cargo build --release

      - name: Test help command
        run: ./target/release/git --help

      - name: Test version
        run: ./target/release/git --version || true

  # Multi-platform build (for releases on push to main, or for PRs)
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [ calculate-version, check, test, basic-functionality ]
    if: (github.event_name == 'pull_request') || (github.event_name == 'push' && needs.calculate-version.outputs.should-release == 'true')
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x64
          - target: x86_64-apple-darwin
            os: macos-13
            name: macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
            ext: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup build environment
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-dev musl-tools
          echo "CC=musl-gcc" >> $GITHUB_ENV

      - name: Download versioned Cargo.toml if available
        uses: actions/download-artifact@v4
        with:
          name: cargo-toml-versioned
          path: .
        continue-on-error: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create artifact directory
        run: mkdir -p artifacts

      - name: Prepare archive
        shell: bash
        run: |
          # Copy binary with standard name (git or git.exe)
          mkdir -p archive
          cp target/${{ matrix.target }}/release/git${{ matrix.ext }} archive/git${{ matrix.ext }}
          if [[ "${{ matrix.os }}" != *"windows"* ]]; then
            chmod +x archive/git${{ matrix.ext }}
          fi
          
          # Create archive with full descriptive name
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ needs.calculate-version.outputs.should-release }}" = "true" ]; then
            ARCHIVE_NAME="portable-git-${{ matrix.name }}-v${{ needs.calculate-version.outputs.new-version }}"
          else
            ARCHIVE_NAME="portable-git-${{ matrix.name }}"
          fi
          
          # Create archive based on OS
          if [[ "${{ matrix.os }}" == *"windows"* ]]; then
            # Windows: Create ZIP archive
            cd archive && 7z a ../artifacts/${ARCHIVE_NAME}.zip * && cd ..
          else
            # Unix-like: Create tar.gz archive
            cd archive && tar -czf ../artifacts/${ARCHIVE_NAME}.tar.gz * && cd ..
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: git-${{ matrix.name }}
          path: artifacts/*
          retention-days: 30

  # Create release (only on push to main when a release is warranted)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ calculate-version, build ]
    if: github.event_name == 'push' && needs.calculate-version.outputs.should-release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create checksums
        run: |
          cd artifacts
          find . -name "portable-git-*" -type f -exec sha256sum {} \; | sed 's|^\./||' > checksums.txt
          cat checksums.txt

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.calculate-version.outputs.new-version }}"
          
          # Create release with all archives
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --generate-notes \
            artifacts/*/portable-git-* \
            artifacts/checksums.txt
