name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Semantish release!
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      should-release: ${{ steps.version.outputs.should-release }}
      new-version: ${{ steps.version.outputs.new-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate Version from PR Title
        id: version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the merge commit message (contains PR title)
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "Commit message: $COMMIT_MSG"
          
          # Extract PR title from merge commit (format: "Merge pull request #123 from branch")
          # Look for PR title in commit body or use commit message directly
          PR_TITLE=""
          if [[ "$COMMIT_MSG" =~ ^Merge\ pull\ request ]]; then
            # Get PR title from commit body
            PR_TITLE=$(git log -1 --pretty=%b | head -1)
          else
            # Direct push, use commit message
            PR_TITLE="$COMMIT_MSG"
          fi
          
          echo "PR/Commit title: $PR_TITLE"
          
          # Get latest release version
          LATEST=$(gh release list --limit 1 --json tagName -q '.[0].tagName' 2>/dev/null || echo "")
          if [ -z "$LATEST" ]; then
            CURRENT_VERSION="0.0.0"
          else
            CURRENT_VERSION=${LATEST#v}  # Remove 'v' prefix
          fi
          
          echo "Current version: $CURRENT_VERSION"
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Determine bump type from PR title
          SHOULD_RELEASE=false
          NEW_VERSION="$CURRENT_VERSION"
          
          case "$PR_TITLE" in
            feat!:*|fix!:*|*"BREAKING CHANGE"*)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              SHOULD_RELEASE=true
              echo "Breaking change detected → major bump"
              ;;
            feat:*)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"  
              SHOULD_RELEASE=true
              echo "Feature detected → minor bump"
              ;;
            fix:*)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              SHOULD_RELEASE=true
              echo "Fix detected → patch bump"
              ;;
            *)
              echo "No release needed (chore, docs, etc.)"
              ;;
          esac
          
          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Result: $CURRENT_VERSION → $NEW_VERSION (release: $SHOULD_RELEASE)"

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}

      - name: Check code compiles
        run: cargo check --all-targets

      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings

      - name: Check formatting
        run: cargo fmt --all -- --check

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test

  basic-functionality:
    name: Basic Functionality Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build binary
        run: cargo build --release

      - name: Test help command
        run: ./target/release/git --help

      - name: Test version
        run: ./target/release/git --version || true

  # Multi-platform build (for releases on push to main, or for PRs)
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [ calculate-version ]
    if: always() && (github.event_name == 'pull_request' || (github.event_name == 'push' && needs.calculate-version.outputs.should-release == 'true'))
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64
          - target: x86_64-apple-darwin
            os: macos-13
            name: macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
            ext: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Update version for release
        if: github.event_name == 'push' && needs.calculate-version.outputs.should-release == 'true'
        run: |
          NEW_VERSION="${{ needs.calculate-version.outputs.new-version }}"
          echo "Updating Cargo.toml version to $NEW_VERSION"
          sed -i 's/version = "0.0.0-dev"/version = "'$NEW_VERSION'"/' Cargo.toml

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create artifact directory
        run: mkdir -p artifacts

      - name: Copy binary (Unix)
        if: "!contains(matrix.os, 'windows')"
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ needs.calculate-version.outputs.should-release }}" = "true" ]; then
            FILENAME="git-${{ matrix.name }}-v${{ needs.calculate-version.outputs.new-version }}"
          else
            FILENAME="git-${{ matrix.name }}"
          fi
          cp target/${{ matrix.target }}/release/git artifacts/$FILENAME
          chmod +x artifacts/$FILENAME

      - name: Copy binary (Windows)
        if: contains(matrix.os, 'windows')
        shell: cmd
        run: |
          if "${{ github.event_name }}" == "push" (
            if "${{ needs.calculate-version.outputs.should-release }}" == "true" (
              set "FILENAME=git-${{ matrix.name }}-v${{ needs.calculate-version.outputs.new-version }}${{ matrix.ext }}"
            ) else (
              set "FILENAME=git-${{ matrix.name }}${{ matrix.ext }}"
            )
          ) else (
            set "FILENAME=git-${{ matrix.name }}${{ matrix.ext }}"
          )
          copy target/${{ matrix.target }}/release/git${{ matrix.ext }} artifacts\%FILENAME%

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: git-${{ matrix.name }}
          path: artifacts/*
          retention-days: 30

  # Create release (only on push to main when a release is warranted)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ calculate-version, build ]
    if: github.event_name == 'push' && needs.calculate-version.outputs.should-release == 'true'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create checksums
        run: |
          cd artifacts
          find . -name "git-*" -type f -exec sha256sum {} \; > checksums.txt
          cat checksums.txt

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.calculate-version.outputs.new-version }}"
          
          # Create release with all artifacts
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --generate-notes \
            artifacts/*/git-* \
            artifacts/checksums.txt